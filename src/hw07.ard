\import Utils
\import hw02 (gcd)
\import hw05 (pmap2)
\import lect06 (Decide, no, yes)
\import lect07

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a,b) => \new Pair { | fst_ => b | snd_ => a }

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A =>
  \new Pair { | fst_ => p.snd_ | snd_ => p.fst_ }

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => p.p

\func one-isPos : PosNat 1 \cowith
  | p => ()

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record Primes
  | a : Nat
  | b : Nat
  | proof : gcd a b = 1

\func coprimes60 => Primes { | b => 60 }

-- 5. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\func isNil {A : \Type} (l : List A) : \Type
  | nil => \Sigma
  | cons a l => Empty

\func cons/=nil {A : \Type} (x : A) (xs : List A) (p : nil = cons x xs) : Empty => transport isNil p ()

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq => helper
  \where {
    \func helper {A : \Type} {dec : Eq A} (a a' : List A) : Decide (a = a') \elim a, a'
      | nil, nil => yes idp
      | nil, cons a l => no (cons/=nil a l)
      | cons a l, nil => no (\lam t => cons/=nil a l (sym t))
      | cons a l, cons a' l' => \case helper l l', dec.decideEq a a' \with {
        | yes p, yes q => yes (pmap (cons a) p *> pmap (\lam t => cons t l') q)
        | _, no q => no (\lam t => q (pmap (head a) t))
        | no p, _ => no (\lam t => p (pmap tail t))
      }

    \func head {A : \Type} (a : A) (l : List A) : A \elim l
      | nil => a
      | cons a l => a

    \func tail {A : \Type} (l : List A) : List A \elim l
      | nil => nil
      | cons a l => l
  }

-- 6. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\func extensionality {A : \Type} (B : A -> \Type) {f g : \Pi (a : A) -> B a}
                     (p : \Pi (a : A) -> f a = g a) : f = g => path (\lam i a => p a @ i)

\class Monad \extends Functor
  | return {A : \Type} : A -> F A
  | \infixl 1 >>= {A B : \Type} : F A -> (A -> F B) -> F B
  | idLeft {A B : \Type} (x : A) (f : A -> F B) : (return x >>= f) = f x
  | idRight {A : \Type} (m : F A) : (m >>= return) = m
  | assoc {A B C : \Type} (m : F A) (f : A -> F B) (g : B -> F C) : ((m >>= f) >>= g) = (m >>= (\lam x => f x >>= g))
  | fmap f fa => fa >>= (\lam x => return (f x))
  | fmap-id => idRight
  | fmap-comp {A B C : \Type} f g y => (pmap (y >>=)
                                             (extensionality (\lam _ => F C) (\lam a =>
                                                 return (g (f a)) ==< sym (idLeft (f a) (\lam x => return (g x))) >==
                                                 (return (f a) >>= (\lam x => return (g x))) `qed
                                             )))
  *> sym (assoc y (\lam x => return (f x)) (\lam x => return (g x)))

-- 7. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe \cowith
  | return => \lam x => just x
  | >>= m f => \case m \with {
    | nothing => nothing
    | just a => f a
  }
  | idLeft a f => idp
  | idRight {A : \Type} (m : Maybe A) : ((m >>= just) = m) \with {
    | nothing => idp
    | just a => idp
  }
  | assoc {A B C : \Type} (m : Maybe A) (f : A -> Maybe B) (g : B -> Maybe C) : ((m >>= f) >>= g) = (m >>= (\lam x => f x >>= g)) \with {
    | nothing, f, g => idp
    | just a, f, g => idp
  }

-- 8. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad (S : \Type) : Monad (\lam A => State S A) \cowith
  | return a => \new State {
    | state => \lam s => (s, a)
  }
  | >>= s f => \new State {
    | state => \lam s' => state {f (state {s} s').2} (state {s} s').1
  }
  | idLeft x f => idp
  | idRight s => idp
  | assoc s f g => idp

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\func get {S A : \Type} (s : State' S A) : S -> \Sigma S A \elim s
  | state' s => s

\instance State'Monad (S : \Type) : Monad (State' S) \cowith
  | return a => state' (\lam s => (s, a))
  | >>= s f => state' (\lam s' => get (f (get s s').2) (get s s').1)
  | idLeft x f => {?}
  | idRight => {?}
  | assoc => {?}

-- 9. Определите \instance Monad для Term.

\instance TermMonad : Monad Term \cowith
  | return => var
  | \infixl 1 >>= {A B : \Type} (m : Term A) (f : A -> Term B) : Term B \elim m {
    | var v => f v
    | unit => unit
    | app t s => app (t >>= f) (s >>= f)
    | lam t => lam (t >>= (captureF f))
  }
  | idLeft x f => idp
  | idRight {A : \Type } (m : Term A) : (m >>= var) = m \elim m {
    | var v => idp
    | unit => idp
    | app t s => pmap2 app (idRight t) (idRight s)
    | lam t => pmap lam (transport (\lam x => (t >>= x) = t) captureF-id (idRight t))
  }
  | assoc {A B C : \Type} (m : Term A) (f : A -> Term B) (g : B -> Term C) : ((m >>= f) >>= g) = (m >>= (\lam x => f x >>= g)) \elim m {
    | var v => idp
    | unit => idp
    | app t s => pmap2 app (assoc t f g) (assoc s f g)
    | lam t => pmap lam (assoc t (captureF f) (captureF g) *> (pmap (>>= t) (captureF-bindPmap f g)))
  }

  \where {
    \func capture {A : \Type} (t : Term A) : Term (Maybe A) \elim t
      | var v => var (just v)
      | unit => unit
      | app t s => app (capture t) (capture s)
      | lam t => lam (capture t)

    \func captureF {A B : \Type} (f : A -> Term B) (a : Maybe A) : Term (Maybe B) \elim a
      | nothing => var nothing
      | just a => capture (f a)

    \func captureF-id {A : \Type} : var = captureF {A} var => extensionality
        (\lam _ => Term (Maybe A))
        {var} {captureF var}
        (\lam x => \case \elim x \with {
          | nothing => idp
          | just a => idp
        })

    \func capture-bindPmap {A B : \Type} (a : Term A) (f : A -> Term B) : (capture a >>= captureF f) = (capture (a >>= f)) \elim a
      | var v => idp
      | unit => idp
      | app t s => pmap2 app (capture-bindPmap t f) (capture-bindPmap s f)
      | lam t => pmap lam (capture-bindPmap t (captureF f))

    \func captureF-bindPmap {A B C : \Type} (f : A -> Term B) (g : B -> Term C)  : (\lam x => captureF f x >>= captureF g) = captureF (\lam x => f x >>= g) => extensionality
        (\lam _ => Term (Maybe C))
        {\lam x => captureF f x >>= captureF g} {captureF (\lam x => f x >>= g)}
        (\lam a => \case \elim a \with {
          | nothing => idp
          | just a => capture-bindPmap (f a) g
        })
  }

-- 10. Определите отношение многошаговой редукции на Term.

\func Red {V : \Type} (t s : Term V) : \Type => {?}

-- 11. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--     Определите любую стратегию редукции.

\func strategy {V : \Type} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) => {?}

-- 12. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Type} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  => {?}

\func substLem1 => {?}

-- 13. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Type} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  => {?}

-- 14. Закончите доказательство утверждения, что все типизируемые термы достижимы.

-- Это более общее утверждение необходимо для усиления индукционной гипотезы.
-- Для его доказательства потребуется вспомогательная лемма, которая говорит, что если термы a и b достижимы, и b[a/x] лежит в интерпретации B, то и (\x.b) a лежит в ней.
\func typeableInterp {V : \Type} (ctx : V -> Type) (env : V -> Term V) (C : \Pi (v : V) -> Interp (ctx v) (env v)) (t : Term V) (T : Type) (p : hasType ctx t T)
  : Interp T (t >>= env) => {?}

-- Это утверждение легко следует из предыдущего.
\func typeableInterpId {V : \Type} (ctx : V -> Type) (t : Term V) (T : Type) (p : hasType ctx t T)
  : Interp T t => {?}
