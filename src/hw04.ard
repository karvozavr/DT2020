\import Utils
\import lect04

-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup {A : \Type} (n : Nat) (xs : List A) (proof : T (n < length xs)) : A \elim n, xs
  | 0, cons a l => a
  | suc n, cons a l => lookup n l proof

-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

\func replicate {A : \Type} (x : A) (n : Nat) : Vec A n  \elim n
  | 0 => vnil
  | suc n => vcons x (replicate x n)

\func replicate' {A : \Type} (x : A) (n : Nat) : vec A n \elim n
  | 0 => ()
  | suc n => (x, replicate' x n)

-- 3. Реализуйте аналоги функции map для vec и Vec.

\func map {A B : \Type} {n : Nat} (f : A -> B) (xs : Vec A n) : Vec B n \elim n, xs
  | 0, vnil => vnil
  | suc n, vcons a v => vcons (f a) (map f v)

\func map' {A B : \Type} {n : Nat} (f : A -> B) (xs : vec A n) : vec B n \elim n, xs
  | 0, xs => ()
  | suc n, xs => ((f xs.1), map' f xs.2)

-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.

\func zipWith {A B C : \Type} (f : A -> B -> C) {n : Nat} (la : Vec A n) (lb : Vec B n): Vec C n \elim n, la, lb
  | 0, vnil, vnil => vnil
  | suc n, vcons a v1, vcons b v2 => vcons (f a b) (zipWith f v1 v2)

\func zipWith' {A B C : \Type} (f : A -> B -> C) {n : Nat} (la : vec A n) (lb : vec B n): vec C n \elim n, la, lb
  | 0, v1, v2 => ()
  | suc n, v1, v2 => ((f v1.1 v2.1), (zipWith' f v1.2 v2.2))

-- 5. Функции Fin n → A соответствуют спискам элементов A длины n.
--    Функция, преобразующая Vec A n в Fin n → A, была реализована на лекции.
--    Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons (f fzero) (coin (\lam x => f (fsuc x)))

-- 6. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => Vec (Vec A m) n

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n \elim n
  | 0 => vnil
  | suc n => vcons (vcons e (replicate z n)) (map (vcons z) (diag z e n))

-- транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n \elim n, M
  | 0, vnil => replicate vnil m
  | suc n, vcons a M => zipWith (\lam x y => vcons x y) a (transpose M)

-- сложение матриц

\func matAdd {A : \Type} {n m : Nat} (add : A -> A -> A) (M N : Mat A n m) : Mat A n m \elim n, M, N
  | 0, vnil, vnil => vnil
  | suc n, vcons v1 M, vcons v2 N => vcons (zipWith add v1 v2) (matAdd add M N)

\func vecadd {A : \Type} {n : Nat} (add : A -> A -> A) (v1 v2 : Vec A n) : Vec A n \elim n, v1, v2
  | 0, vnil, vnil => vnil
  | suc n, vcons a v, vcons a1 v1 => vcons (add a a1) (vecadd add v v1)

\func vecsum {A : \Type} {n : Nat} (add : A -> A -> A) (z : A)  (v : Vec A n) : A \elim n, v
  | 0, vnil => z
  | suc n, vcons a v => add a (vecsum add z v)

-- умножение матриц
-- z ─ нейтральный элемент по сложению.

\func matMul {A : \Type} {n m k : Nat} (z : A) (add mul : A -> A -> A)  (M : Mat A n m) (N : Mat A m k) : Mat A n k \elim n,  M
  | 0, vnil => vnil
  | suc n, vcons a M => vcons (map (\lam x => vecsum add z (vecadd mul a x)) (transpose N)) (matMul z add mul M N)

-- 7. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => cleaf
  | suc n => ctree A (CTree A n) (CTree A n)

-- 8. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

-- Зачем нужно 3 конструктора в случае suc n?
\data Tree (A : \Type) (n : Nat) \elim n
  | _ => leaf
  | suc n => node A (Tree A n) (Tree A n)


-- определите функцию, возвращающую высоту дерева.

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) \elim n, t
  | 0, _ => fzero
  | _, leaf => fzero
  | suc n, node a l r => fsuc (max (height n l) (height n r))
  \where
    \func max {n : Nat} (a b : Fin n) : Fin n => \case (toNat a < toNat b) \with {
      | true => a
      | false => b
    }
