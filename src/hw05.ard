\import Utils
\open Nat \hiding (<=)

-- 1. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => (f a) b = (f x) b') p (pmap (f a) q)

-- 2. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  repl (pmap B p) b

-- 3. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\data List (A : \Type) | nil | cons A (List A)

\func \infixl 4 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => reverse xs ++ cons x nil

-- Это утверждение будет полезно для доказательства.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | cons a l => pmap (cons a) (++-assoc l ys zs)

\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => rv' (reverse ys)
  | cons x xs =>
    ((reverse (xs ++ ys)) ++ cons x nil)         ==< pmap (\lam t => t ++ cons x nil) (reverse++ xs ys) >==
    ((reverse ys ++ reverse xs) ++ cons x nil)   ==< ++-assoc (reverse ys) (reverse xs) (cons x nil) >==
    (reverse ys ++ ((reverse xs) ++ cons x nil)) `qed
  \where
    \func rv' {A : \Type} (xs : List A) : xs = xs ++ nil \elim xs
      | nil => idp
      | cons x xs => pmap (cons x) (rv' xs)

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | cons x xs =>
    (reverse (reverse xs ++ cons x nil)) ==< reverse++ (reverse xs) (cons x nil) >==
    (cons x (reverse (reverse xs)))      ==< pmap (cons x) (reverse-isInvolutive xs) >==
    (cons x xs) `qed

-- 4. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func +-assoc (n m k : Nat) : (n + m) + k = n + (m + k) \elim k
  | 0 => idp
  | suc k => pmap suc (+-assoc n m k)

\func +-comm (n m : Nat) : n + m = m + n
  | 0, 0 => idp
  | 0, suc m => pmap suc (+-comm 0 m)
  | suc n, 0 => pmap suc (+-comm n 0)
  | suc n, suc m => pmap suc (
    suc n + m   ==< +-comm (suc n) m >==
    suc (m + n) ==< pmap suc (sym (+-comm n m)) >==
    suc (n + m) ==< +-comm n (suc m) >==
    suc m + n   `qed)

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim m, k
  | 0, 0 => idp
  | 0, suc k =>
    n * (0 + k) + n ==< pmap (\lam x => n * x + n) (+-comm 0 k) >==
    n * k + n       ==< sym (+-comm 0 (n * k + n)) >==
    0 + (n * k + n) `qed
  | suc m, 0 => idp
  | suc m, suc k => sym (
    (n * m + n) + (n * k + n)   ==< +-assoc (n * m) n (n * k + n) >==
    (n * m) + (n + (n * k + n)) ==< pmap (\lam x => (n * m) + x) (+-comm n (n * k + n)) >==
    n * m + ((n * k + n) + n)   ==< sym (+-assoc (n * m) (n * k + n) n) >==
    n * m + (n * k + n) + n     ==< pmap (\lam x => x + n)
                                         (
                                           n * m + (n * k + n) ==< pmap (\lam x => n * m + x) (+-comm (n * k) n) >==
                                           n * m + (n + n * k) ==< sym (+-assoc (n * m) n (n * k)) >==
                                           n * (suc m) + n * k ==< sym (ldistr n (suc m) k) >==
                                           n * (suc m + k) `qed
                                         ) >==
    n * (suc m + k) + n `qed
  )

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n =>
    (m + k) * n + (m + k)     ==< pmap (\lam x => x + (m + k)) (rdistr n m k) >==
    (m * n + k * n) + (m + k) ==< +-assoc (m * n) (k * n) (m + k) >==
    m * n + (k * n + (m + k)) ==< pmap (\lam x => m * n + x)
                                       (
                                         k * n + (m + k) ==< sym (+-assoc (k * n) m k) >==
                                         (k * n + m) + k ==< pmap (\lam x => x + k) (+-comm (k * n) m) >==
                                         (m + k * n) + k ==< +-assoc m (k * n) k >==
                                         m + (k * n + k) `qed
                                       ) >==
    m * n + (m + (k * n + k)) ==< sym (+-assoc (m * n) m (k * n + k)) >==
    m * n + m + (k * n + k) `qed

{-
-- rdistr можно реализовать через ldistr и *-comm.
-- Ниже приведен план доказательства *-comm.
\func *-comm (n m : Nat) : n * m = m * n
  | 0, 0 => idp
  | 0, suc m => *-comm 0 m
  | suc n, 0 => *-comm n 0
  | suc n, suc m => pmap suc (
      suc n * m + n   ==< {?} >==
      m * suc n + n   ==< idp >==
      (m * n + m) + n ==< {?} >==
      m * n + (m + n) ==< {?} >==
      n * m + (n + m) ==< {?} >==
      (n * m + n) + m ==< idp >==
      n * suc m + m   ==< {?} >==
      suc m * n + m   `qed)
-}

-- 5. Докажите, что (\lam x => not (not x)) = (\lam x => x).

\func not (b : Bool) : Bool
  | true => false
  | false => true

\func notNotId : (\lam x => not (not x)) = (\lam x => x) => path (\lam i a => not-idp a @ i)
  \where
    \func not-idp (x : Bool) : not (not x) = x \elim x
      | true => idp
      | false => idp

-- 6. Определите факториал через Nat-rec.

\func Nat-rec (P : \Type)
              (z : P)
              (s : Nat -> P -> P)
              (x : Nat) : P
\elim x
  | zero => z
  | suc n => s n (Nat-rec P z s n)

\func factorial (n : Nat) : Nat => Nat-rec Nat 1 (\lam x r => (suc x) * r) n

\func fact1 : factorial 0 = 1 => idp

\func fact2 : factorial 1 = 1 => idp

\func fact3 : factorial 3 = 6 => idp

-- 7. Докажите ассоциативность сложения для натуральных чисел через Nat-elim.

\func Nat-elim (P : Nat -> \Type)
               (z : P zero)
               (s : \Pi (n : Nat) -> P n -> P (suc n))
               (x : Nat) : P x
\elim x
  | zero => z
  | suc n => s n (Nat-elim P z s n)

\func +-assoc' (n m k : Nat) : (n + m) + k = n + (m + k) =>
  Nat-elim (\lam k => (n + m) + k = n + (m + k)) idp (\lam n pn => pmap suc pn) k

-- 8. Определите рекурсор и элиминатор для D.

\data D
  | con1 Nat
  | con2 D D
  | con3 (Nat -> D)

\func D-rec (P : \Type)
            (c1 : Nat -> P)
            (c2 : D -> D -> P -> P -> P)
            (c3 : (Nat -> D) -> (Nat -> P) -> P)
            (x : D) : P
\elim x
  | con1 n => (c1 n)
  | con2 d1 d2 => c2 d1 d2 (D-rec P c1 c2 c3 d1) (D-rec P c1 c2 c3 d2)
  | con3 f => c3 f (\lam x => D-rec P c1 c2 c3 (f x))

\func D-elim (P : D -> \Type)
             (c1 : \Pi (n : Nat) -> P (con1 n))
             (c2 : \Pi (d1 d2 : D) -> P d1 -> P d2 -> P (con2 d1 d2))
             (c3 : \Pi (f : Nat -> D) -> (\Pi (n : Nat) -> P (f n)) -> P (con3 f))
             (x : D) : P x
\elim x
  | con1 n => (c1 n)
  | con2 d1 d2 => c2 d1 d2 (D-elim P c1 c2 c3 d1) (D-elim P c1 c2 c3 d2)
  | con3 f => c3 f (\lam x => D-elim P c1 c2 c3 (f x))

-- 9. Определите рекурсор и элиминатор для List.

\func List-rec {A : \Type}
               (P : \Type)
               (n : P)
               (c : A -> List A -> P -> P)
               (x : List A) : P
\elim x
  | nil => n
  | cons a l => c a l (List-rec P n c l)

\func List-elim {A : \Type}
                (P : List A -> \Type)
                (n : P nil)
                (c : \Pi (a : A) (l : List A) -> P l -> P (cons a l))
                (x : List A) : P x
\elim x
  | nil => n
  | cons a l => c a l (List-elim P n c l)

-- 10. Докажите, что 0 не равно suc x.

\func is-zero (x : Nat) : \Type \elim x
  | 0 => \Sigma
  | suc n => Empty

\func zero/=suc (x : Nat) (p : 0 = suc x) : Empty => transport is-zero p ()

-- 11. Докажите, что fac не равен suc.

\func is-fac (x : Nat -> Nat) : \Type => \case x 1 \with {
  | 1 => \Sigma
  | n => Empty
}

\open Nat (*)

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func fac/=suc (p : fac = suc) : Empty => transport is-fac p ()

-- 12. Докажите, что left = right, не используя transport, coe и паттерн матчинг с idp.

\func left=right : left = right => path (\lam i => i)

-- 13. Докажите, что если a = a' и b = b', то (a,b) = (a',b'), не используя transport, coe и паттерн матчинг с idp.

\func pairEq {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b') : (a,b) = (a',b') =>
  pmap2 (\lam x y => (x, y)) p q

-- 14. Докажите, что если p = p', то p.1 = p'.1, не используя transport, coe и паттерн матчинг с idp.

\func projEq {A : \Type} (B : A -> \Type) {p p' : \Sigma (x : A) (B x)} (t : p = p') : p.1 = p'.1 =>
  pmap (\lam x => x.1) t

-- 15. Докажите pmap2, не используя transport, coe и паттерн матчинг с idp.

\func pmap2' {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => (f a) b = (f x) b') p (pmap (f a) q)

-- 16. Мы видели как определить transport через coe. Определите частный случай coe через transport.
--     Можно ли определить transport через coe0?

\func coe0 (A : I -> \Type) (a : A left) : A right => transport A left=right a

-- 17. Определите функцию B right -> B left.

\func Itr' {B : I -> \Type} (b : B right) : B left => transport B (sym left=right) b

-- 18. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p =>
  J (B a) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- 1. Выразите transport через Jalt.
-- 2. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- 3. Используя эти две конструкции, легко определить J.

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  (Jalt (\lam x y _ => B x -> B y) (\lam x y => y) p) b

-- Jalt (\lam a a' => {?}) (B idp) p

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p \elim p
  | (x, idp) => idp

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p => (transport'' (\lam x => B x.1 x.2) (sigma-contr (a', p)) b)
