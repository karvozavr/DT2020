\import hw05 (zero/=suc)
\import lect06
\import lect09
\import Utils

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) =>
  \lam x y gf => p x y (q (f x) (f y) gf)

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  \lam x y gf => p x y (pmap g gf)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func isMultipleOf3Or5 (n : Nat) : \Type => T (\case mod3 n \with {
  | 0 => true
  | suc n => \case mod5 (suc n) \with {
    | 0 => true
    | suc n => false
  }
})

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) => \lam x y => T-lem

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => \lam x y p => sigmaEq isMultipleOf3Or5 x y p T-lem

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) =>
  (\lam tr => (\lam x y => sym (tr.2 x) *> tr.2 y, tr.1), \lam sgm => (sgm.2, sgm.1 sgm.2))

-- 4. Докажите, что Either не является утверждением в общем случаем.
--\func true/=false (p : true = false) : Empty => transport T p ()

\func helper {A B : \Type} (x : Either A B) : \Type \elim x
  | Either.inl a => \Sigma
  | Either.inr b => Empty

\func inl/=inr {A B : \Type} {x : A} {y : B} (p : Either.inl x = Either.inr y) : Empty => transport helper p ()

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Either A B)) : Empty =>
  inl/=inr ((p Unit-isProp Unit-isProp) (Either.inl ()) (Either.inr ()))

-- 5. Докажите, что \Sigma сохраняет утверждения.

\func Sigma-isProp {A : \Type} (pA : isProp A) (B : A -> \Type)
                   (pB : \Pi (x : A) -> isProp (B x))
  : isProp (\Sigma (x : A) (B x)) => \lam p q => sigmaEq B p q (pA p.1 q.1) (pB q.1 (transport B (pA p.1 q.1) p.2) q.2)

-- 6. Докажите, что LessOrEq и LessOrEq' являются предикатами.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\data LessOrEq' (n m : Nat) : \Set0 \elim m
  | suc m => <=-step (LessOrEq' n m)
  | m => <=-refl (n = m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) => aux n m
  \where
    \func aux (n m : Nat) (x y : LessOrEq n m) : x = y \elim n, m, x, y
      | 0, 0, z<=n, z<=n => idp
      | 0, suc n, z<=n, z<=n => idp
      | suc n, suc m, s<=s x, s<=s y => pmap s<=s (aux n m x y)

-- Для решения LessOrEq'-isProp понадобится тот факт, что Nat является множеством.
-- Сейчас доказывать это не нужно доказывать, доказательство будет приведено позже.

\func pred (n : Nat) : Nat \elim n
  | 0 => 0
  | suc n => n

\func Nat-isSet : isSet Nat => {?}

\func LessOrEq'-isProp {n m : Nat} : isProp (LessOrEq' n m) => \lam x y => aux n m x y
  \where {
    \func aux (n m : Nat) (x y : LessOrEq' n m) : x = y \elim n, m, x, y
      | n, m, <=-refl p, <=-refl q => pmap <=-refl ((Nat-isSet n m) p q)
      | n, suc m, <=-step p, <=-step q => pmap <=-step (aux n m p q)
      | n, suc m, <=-step p, <=-refl q => absurd (helper n m p q)
      | n, suc m, <=-refl p, <=-step q => absurd (helper n m q p)

    \func helper (n m : Nat) (less : LessOrEq' n m) (p : n = suc m) : Empty \elim n, m, less
      | n, 0, <=-refl l => absurd (zero/=suc 0 (sym l *> p))
      | 0, suc m, <=-step l => absurd (zero/=suc (suc m) p)
      | suc n, suc m, <=-step l => helper n m (lessOrEqPred l) (pmap pred p)
      | n, suc m, <=-refl r => absurd (nIsNotsucn (sym r *> p))

    \func lessOrEqPred {n m : Nat} (l : LessOrEq' (suc n) m) : LessOrEq' n m \elim m, l
      | 0, <=-refl p => absurd (zero/=suc n (sym p))
      | suc m, <=-step p => <=-step (lessOrEqPred p)
      | suc m, <=-refl p => <=-step (<=-refl (pmap pred p))

    \func nIsNotsucn {n : Nat} (p : n = suc n) : Empty \elim n
      | 0 => zero/=suc 0 p
      | suc n => nIsNotsucn (pmap pred p)
  }

-- 7. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m) => \lam x y => helper n m x y
  \where {
    \func helper (n m : Nat) (x y : (ReflClosure (\lam x y => T (x < y)) n m)) : x = y \elim x, y
      | refl p, refl q => pmap refl (Nat-isSet n m p q)
      | refl p, inc q => absurd (reflIsNotInc n m p q)
      | inc p, refl q => absurd (reflIsNotInc n m q p)
      | inc p, inc q => pmap inc T-lem

    \func reflIsNotInc (n m : Nat) (p : n = m) (r : T (n < m)) : Empty \elim n, m, r
      | 0, suc m, r => absurd (zero/=suc m p)
      | suc n, suc m, r => reflIsNotInc n m (pmap pred p) r
  }

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty =>
  transport reflClosureDec (p 1 1 (inc (s<=s z<=n)) (refl idp)) ()
  \where
    \func reflClosureDec {n m : Nat} (r : ReflClosure LessOrEq n m) : \Type \elim r
      | refl p => Empty
      | inc r => \Sigma

-- 8. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A =>
  \lam x y => p x y (q (f x) (f y))

-- 9. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A =>
  \lam x y => \lam a b => \case dec x y \with {
    | yes x=y => {?}
    | no n => absurd (n a)
  }

-- 10. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B



\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B) => aux
\where {
  \func aux {A B : \Type} (x y : Or A B) (a b : x = y) : a = b \elim x, y
    | inl a1, inl a2 => {?}
    | inl a1, inr b1 => absurd (inlIsNotInr a)
    | inr b1, inl a1 => absurd (inlIsNotInr (sym a))
    | inr b, inr b1 => {?}

  \func inlIsNotInr {A B : \Type} {x : A} {y : B} (p : inl x = inr y) => transport (\lam t => \case t \with {
    | inl x => \Sigma
    | inr y => Empty
  }) p ()
}

-- 11. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) => {?}

-- 12. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A) => {?}
