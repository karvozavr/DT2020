\import Prelude
\import Utils
\import lect02 ()
\import lect05 (+-comm)
\import lect06
\open Nat (+, *)

-- 1. Докажите, что vnil является нейтральным элементом для v++.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0, vnil => idp
  | suc n, vcons a v => v++-assoc'.lem (v v++ vnil) a (+-comm 0 n) *> pmap (vcons a) (vnil-rightId v)

-- 2. Определите предикат принадлежности элемента списку.

\data In {A : \Type} (a : A) (xs : List A) \elim xs
  | cons x xs => {| isIn (x = a) | isIn' (In a xs)}

-- 3. Докажите эквивалентность четырех различных определений LessOrEq: lessOrEq, lessOrEq', LessOrEq и LessOrEq'.

\func suc+ (n m : Nat) : suc (n + m) = suc n + m
  | 0, 0 => idp
  | 0, suc n => pmap suc (pmap suc (+-comm 0 n) *> +-comm n 1)
  | suc n, 0 => idp
  | suc n, suc m => pmap suc (suc+ (suc n) m)

\func pred (n : Nat) : Nat \elim n
  | 0 => 0
  | suc n => n

\func lessOrEq->lessOrEq' (n m : Nat) (p : lessOrEq n m) : lessOrEq' n m \elim n, m, p
  | 0, _, _ => ()
  | suc n, 0, (k, p) => suc/=0 ((suc+ n k) *> p)
  | suc n, suc m, (k, p) => lessOrEq->lessOrEq' n m (k, pmap pred (transport (\lam t => t = suc m) (sym (suc+ n k)) p))

\func lessOrEq'->LessOrEq (n m : Nat) (p : lessOrEq' n m) : LessOrEq n m \elim n, m
  | 0, 0 => z<=n
  | 0, suc n => z<=n
  | suc n, suc m => s<=s (lessOrEq'->LessOrEq n m p)

\func LessOrEq->LessOrEq' (n m : Nat) (p : LessOrEq n m) : LessOrEq' n m \elim n, m, p
  | 0, 0, p => <=-refl idp
  | 0, suc m, p => <=-step (LessOrEq->LessOrEq' 0 m z<=n)
  | suc n, suc m, s<=s p => helper n m (LessOrEq->LessOrEq' n m p)
  \where
    \func helper (n m : Nat) (p : LessOrEq' n m) : LessOrEq' (suc n) (suc m) \elim n, m, p
      | 0, 0, <=-refl = => <=-refl idp
      | 0, suc n, <=-step p => <=-step (helper 0 n p)
      | suc n, 0, <=-refl = => absurd (suc/=0 =)
      | _, suc m, <=-refl = => <=-refl (pmap suc =)
      | suc n, suc m, <=-step p => <=-step (helper (suc n) m p)

\func LessOrEq'->lessOrEq (n m : Nat) (p : LessOrEq' n m) : lessOrEq n m \elim n, m, p
  | 0, 0, <=-refl = => (0, idp)
  | 0, suc m, <=-refl = => absurd (suc/=0 (sym =))
  | 0, suc m, <=-step p => (suc m, pmap suc (+-comm 0 m))
  | suc n, 0, <=-refl = => absurd (suc/=0 =)
  | suc n, suc m, <=-refl = => (0, =)
  | suc n, suc m, <=-step p => (
    (LessOrEq'->lessOrEq n m (helper n m p)).1,
    transport (\lam z => z = suc m)
              (suc+ n (LessOrEq'->lessOrEq n m (helper n m p)).1)
              (pmap suc (LessOrEq'->lessOrEq n m (helper n m p)).2)
  )
  \where
    \func helper (n m : Nat) (p : LessOrEq' (suc n) m) : LessOrEq' n m \elim n, m, p
      | _, 0, <=-refl = => absurd (suc/=0 =)
      | _, suc m, <=-refl = => <=-step (<=-refl (pmap pred =))
      | 0, suc m, <=-step p => <=-step (helper 0 m p)
      | suc n, suc m, <=-step p => <=-step (helper (suc n) m p)

-- 4. Определите рефлексивное транзитивное замыкание отношения.
--    То есть ReflTransClosure R -- это минимальное рефлексивное и транзитивное отношение, содержащее R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | Refl (x = y)
  | Trans (z : A) (R x z) (ReflTransClosure R z y)

-- 5. Докажите, что если R уже рекфлексивно и транзитивно, то ReflTransClosure R эквивалентно R.

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
  : \Pi (x y : A) -> R x y <-> ReflTransClosure R x y =>
  \lam x y => (\lam f => Trans y (trans x y y f (refl y)) (Refl idp), \lam rtc => (helper R refl trans) x y rtc )
  \where
    \func helper  {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z) (x y : A) (rtc : ReflTransClosure R x y) : R x y \elim rtc
      | Refl idp => refl x
      | Trans z r r* => trans x z y r (helper R refl trans z y r*)

-- 6. Определите предикат Sublist xs ys на списках, означающий "список xs является подсписком ys".

\data Sublist {A : \Type} (xs : List A) (ys : List A) \elim xs, ys
  | nil, ys => nilSublist
  | cons x xs, cons y ys => { | isSublistEq (x = y) (Sublist xs ys) | isSublist (Sublist (cons x xs) ys) }

-- 7. Докажите, что Sublist (filter xs) xs для любого списка xs.

\func filter-sublist {A : \Type} (p : A -> Bool) (xs : List A) : Sublist (filter p xs) xs \elim xs
  | nil => nilSublist
  | cons x xs => \case p x \as b \return Sublist (\case b \with {
    | true => cons x (filter p xs)
    | false => filter p xs
  }) (cons x xs) \with {
    | true => isSublistEq idp (filter-sublist p xs)
    | false => sublist-of-larger x (filter p xs) xs (filter-sublist p xs)
  }
  \where
    \func sublist-of-larger {A : \Type} (t : A) (xs : List A) (ys : List A) (p : Sublist xs ys): Sublist xs (cons t ys) \elim xs, ys, p
      | nil, _, _ => nilSublist
      | cons x xs, cons y ys, p => isSublist p

-- 8. Реализуйте любой алгоритм сортировки, используя \case для паттерн матчинга на результате сравнения элементов списка.

\func sort {A : \Type} (comparator : A -> A -> Ordering) (xs : List A) => inssort (less comparator LT) xs
  \where {
    \func less {A : \Type} (comparator : A -> A -> Ordering) (ordering : Ordering) (x y : A) : Bool =>
      \case ordering, (comparator x y) \with {
        | LT, LT => true
        | EQ, EQ => true
        | GT, GT => true
        | _, _ => false
      }

    \func inssort {A : \Type} (less : A -> A -> Bool) (l : List A) : List A => sort less l nil
      \where {
        \func sort {A : \Type} (less : A -> A -> Bool) (l acc : List A) : List A \elim l
          | nil => acc
          | cons x xs => sort less xs (insert less acc x)

        \func insert {A : \Type} (less : A -> A -> Bool) (l : List A) (elem : A): List A \elim l
          | nil => cons elem nil
          | cons x xs => if (less x elem) (cons x (insert less xs elem)) (cons elem (cons x xs))
      }
  }

-- 9. Определите filter через if, а не через \case.
--    Докажите для этой версии filter лемму filter-lem.

\func if {A : \Type} (c : Bool) (t f : A) : A \elim c
  | true => t
  | false => f

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => if (p x) (cons x (filter' p xs)) (filter' p xs)

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) Nat.<= length xs \elim xs
  | nil => Nat.zero<=_
  | cons x xs => \case p x \as b \return length (if b (cons x (filter' p xs)) (filter' p xs)) Nat.<= suc (length xs) \with {
    | true => Nat.suc<=suc (filter-lem p xs)
    | false => <=-helper (filter-lem p xs)
  }

-- 10. Закончите определение функции \func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x из лекции.

\func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x =>
  \case \elim x, f true \as p, idp : f true = p, f false \as q, idp : f false = q \with {
    | true, true, p, true, q => pmap f (pmap f p *> p)
    | true, false, p, true, q => pmap f (pmap f p *> q)
    | true, false, p, false, q => pmap (\lam x => f (f x)) p *> pmap f q *> q *> sym p
    | false, true, p, true, q => pmap (\lam x => f (f x)) q *> pmap f p *> p *> sym q
    | false, _, _, false, q => pmap (\lam x => f (f x)) q *> pmap f q
    | true, true, p, false, q => pmap (\lam x => f (f x)) p *> pmap f p
    | false, false, p, true, q => pmap (\lam x => f (f x)) q *> pmap f p
  }

-- 11. Парадокс Рассела показывает, что не существует множества всех множеств.
-- Если такое множеств существует, то мы можем определить множество B, состоящее из множеств, не содержащих себя.
-- Тогда B принадлежит себе тогда и только тогда, когда оно себе не принадлежит.
-- Отсюда следует противоречии.
-- Теорема Кантора утверждает, что не сущесвует множества X с сюръекцией из X в множество подмножеств X.
-- Ее доказательство также конструирует утверждение, которое верно тогда и только тогда, когда оно ложно.
-- Верно, что в общем случае существование такого утверждения влечет противоречие.
-- Это легко доказать при помощи исключенного третьего, но утверждение верно и без него.
-- Докажите этот факт.

\func contrProp {A : \Type} (p : A -> Not A) (q : Not A -> A) : Empty => p (q (\lam x => p x x)) (q (\lam x => p x x))

-- 12. Докажите, что предикат isEven разрешим.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func isEven-dec : DecPred isEven => \lam x => \case parity x \with {
  | even n p => yes (n, p)
  | odd n p => no (\lam iseven => odd-is-not-even n iseven.1 (sym (sym iseven.2 *> p)))
} \where {
  \func odd-is-not-even (n m : Nat) (contr : suc  (2 * n) = 2 * m) : Empty \elim n, m
    | 0, 0 => suc/=0  contr
    | 0, suc m => suc/=0 (pmap pred (sym contr))
    | suc n, 0 => suc/=0 contr
    | suc n, suc m => odd-is-not-even n m (pmap (\lam t => pred (pred t)) contr)
}

-- 13. Докажите, что если равенство элементов A разрешимо, то любой список элементов A либо пуст, либо состоит из повторений одного элемента, либо в A существует два различных элемента.

\func repeat {A : \Type} (n : Nat) (a : A) : List A \elim n
  | 0 => nil
  | suc n => cons a (repeat n a)

\data Result (A : \Type) (xs : List A)
  | empty (xs = nil)
  | repeated (n : Nat) (a : A) (p : xs = repeat n a)
  | A-is-not-trivial (a a' : A) (p : a = a' -> Empty)

\func lemma {A : \Type} (xs : List A) {dec : DecEq A} : Result A xs \elim xs
  | nil => empty idp
  | cons x xs => \case lemma {A} xs {dec} \with {
    | empty p => repeated 1 x (pmap (cons x) p)
    | repeated n a p => \case dec x a \with {
      | yes q => repeated (suc n) a (pmap (\lam t => cons t xs) q *> pmap (cons a) p)
      | no q => A-is-not-trivial x a q
    }
    | A-is-not-trivial a a' p => A-is-not-trivial a a' p
  }

-- 14. Определите view, представляющий число в виде частного и остатка от деления его на произвольное (неотрицательное) число m.
--    Реализуйте функцию деления.

\data ModView (m n : Nat)
  | quot-rem (q r : Nat) (t : r < m) (p : n = q * m + r)

\func mod-view (m n : Nat) (t : 0 < m) : ModView m n \elim m, n, t
  | suc m, 0, p => quot-rem 0 0 p (zero-mult-id m)
  | suc m', suc n', p => \case mod-view (suc m') n' p \with {
    | quot-rem q r t p' => \case decEq (suc r) (suc m') \with {
      | no proof => quot-rem q (suc r) (<&&/= r (suc m') proof t) (pmap suc p')
      | yes proof => quot-rem (suc q) 0 t (pmap suc p' *> {?})
    }
  }
  \where {
    \func zero-mult-id (n : Nat) : 0 = 0 * n
      | 0 => idp
      | suc n => zero-mult-id n

    \func decEq : DecEq Nat => \lam n m => helper n m
      \where
        \func helper (n m : Nat) : Decide (n = m)
          | 0, 0 => yes idp
          | 0, suc m => no (\lam t => suc/=0 (sym t))
          | suc n, 0 => no (\lam t => suc/=0 t)
          | suc n, suc m => \case (helper n m) \with {
            | yes p => yes (pmap suc p)
            | no p => no (\lam t => p (pmap pred t))
          }

    \func suc>zero {n : Nat} (p : (suc n) Nat.<= 0) : Empty

    \func <&&/= (n m : Nat) (q : Not (suc n = m)) (p : n < m)  : suc n < m \elim n, m
      | _, 0 => absurd (suc>zero p)
      | 0, suc m => \case m \as k, idp : k = m \with {
        | 0, t => absurd (q (pmap suc t))
        | suc n', t => transport (\lam n => 1 < suc n) t (Nat.suc<=suc (Nat.suc<=suc Nat.zero<=_))
      }
      | suc n, suc m => \case p \with {
        | Nat.suc<=suc p' => Nat.suc<=suc (<&&/= n m (\lam z => q (pmap suc z)) p')
      }
  }

\func div (n m : Nat) (t : 0 < m) : Nat => \case (mod-view m n t) \with {
  | quot-rem q r t p => q
}

-- 15. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func extensionality {A : \Type} (B : A -> \Type) {f g : \Pi (a : A) -> B a}
                     (p : \Pi (a : A) -> f a = g a) : f = g => path (\lam i a => p a @ i)

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p =>
  extensionality (\lam _ => Bool) (\lam a => \case (p a) \as pa \return
  (\case
    \case pa \as pa' \return Decide (T pa') \with {
      | true => yes ()
      | false => no absurd
    }
  \with {
    | yes _ => true
    | no _ => false
  }) = pa

  \with {
    | true => idp
    | false => idp
  })

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P, но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны.
-- Для этого введем эквивалентность предикатов.

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P))
  : \Pi (x : A) -> (FromBoolToDec (FromDecToBool P)).1 x <-> P.1 x =>
  \lam x => \case P.2 x \as b \return (\Sigma

    (T (\case b \with {
      | yes a => true
      | no n => false
    }) -> P.1 x)

    (P.1 x -> T (\case b \with {
      | yes a => true
      | no n => false
    })))

  \with {
    | yes q => (\lam t => q, \lam t => ())
    | no q => (\lam t => absurd t, \lam t => q t)
  }